version: "3.8"

# Define services
services:
  # Zookeeper configuration for managing Kafka state
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: always
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ruok"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - webnet

  # Kafka configuration for message queuing and streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - webnet

  # Backend API service configuration
  dowell-proctoring-backend:
    build: ./backend
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - webnet

  # Frontend service configuration serving static files
  dowell-proctoring-frontend:
    build: ./frontend
    ports:
      - "4173:4173"
    networks:
      - webnet

  # PeerJS server configuration for peer-to-peer communication
  dowell-proctoring-peerjs:
    image: peerjs/peerjs-server
    ports:
      - "9000:9000"
    environment:
      PEERJS_PORT: 9000
      PEERJS_KEY: peerjs
      PEERJS_PATH: /myapp
    networks:
      - webnet

# Define networks to be used by services
networks:
  webnet:
    driver: bridge